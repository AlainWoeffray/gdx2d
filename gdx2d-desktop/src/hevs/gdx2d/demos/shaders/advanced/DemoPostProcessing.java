package hevs.gdx2d.demos.shaders.advanced;

import hevs.gdx2d.lib.GdxGraphics;
import hevs.gdx2d.lib.PortableApplication;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;

/**
 * Demonstrates how to use a shader to postprocess
 * an image generated by the library
 * @author Pierre-Andr√© Mudry (mui)
 * @version 0.1
 */
public class DemoPostProcessing extends PortableApplication{

	public DemoPostProcessing(boolean onAndroid) {
		super(onAndroid);
	}
	
	@Override
	public void onInit() {	
		this.setTitle("Postprocessing with shader, mui 2013");
	}
	
	float t = 0;
	boolean clicked = false;
	boolean image1 = true;
	
	@Override
	public void onGraphicRender(GdxGraphics g) {
		if(g.shaderRenderer == null){
			g.setShader("data/shader/advanced/postprocessing.fp");
		}
		
		// TODO This has yet to be done
		
		g.clear();
		t+= Gdx.graphics.getDeltaTime();			

		g.drawFilledCircle(30, 30, 50, Color.BLUE);
		
		g.drawShader(t);		
		
		g.drawFPS();		
		g.drawSchoolLogo();
	}
	
	public void onClick(int x, int y, int button) {
		super.onClick(x, y, button);
		clicked = true;
	}
	
	public static void main(String args[]){
		new DemoPostProcessing(false);
	}
}
