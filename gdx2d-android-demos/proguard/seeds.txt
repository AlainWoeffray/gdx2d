android.support.v4.app.BackStackState
android.support.v4.app.BackStackState: android.os.Parcelable$Creator CREATOR
android.support.v4.app.Fragment$SavedState
android.support.v4.app.Fragment$SavedState: android.os.Parcelable$Creator CREATOR
android.support.v4.app.FragmentManagerState
android.support.v4.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
android.support.v4.app.FragmentState
android.support.v4.app.FragmentState: android.os.Parcelable$Creator CREATOR
android.support.v4.app.FragmentTabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)
android.support.v4.app.FragmentTabHost$SavedState
android.support.v4.app.FragmentTabHost$SavedState: android.os.Parcelable$Creator CREATOR
android.support.v4.content.ModernAsyncTask$Status: android.support.v4.content.ModernAsyncTask$Status[] values()
android.support.v4.content.ModernAsyncTask$Status: android.support.v4.content.ModernAsyncTask$Status valueOf(java.lang.String)
android.support.v4.view.PagerTabStrip: void setTabIndicatorColor(int)
android.support.v4.view.PagerTabStrip: void setTabIndicatorColorResource(int)
android.support.v4.view.PagerTabStrip: int getTabIndicatorColor()
android.support.v4.view.PagerTabStrip: void setTextSpacing(int)
android.support.v4.view.PagerTabStrip: void setBackgroundDrawable(android.graphics.drawable.Drawable)
android.support.v4.view.PagerTabStrip: void setBackgroundColor(int)
android.support.v4.view.PagerTabStrip: void setBackgroundResource(int)
android.support.v4.view.PagerTabStrip: void setDrawFullUnderline(boolean)
android.support.v4.view.PagerTabStrip: boolean getDrawFullUnderline()
android.support.v4.view.PagerTabStrip: int getMinHeight()
android.support.v4.view.PagerTitleStrip: void setSingleLineAllCaps(android.widget.TextView)
android.support.v4.view.PagerTitleStrip: void setTextSpacing(int)
android.support.v4.view.PagerTitleStrip: int getTextSpacing()
android.support.v4.view.PagerTitleStrip: void setNonPrimaryAlpha(float)
android.support.v4.view.PagerTitleStrip: void setTextColor(int)
android.support.v4.view.PagerTitleStrip: void setGravity(int)
android.support.v4.view.PagerTitleStrip: int getMinHeight()
android.support.v4.view.ViewPager: void setScrollState(int)
android.support.v4.view.ViewPager: void setAdapter(android.support.v4.view.PagerAdapter)
android.support.v4.view.ViewPager: android.support.v4.view.PagerAdapter getAdapter()
android.support.v4.view.ViewPager: void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener)
android.support.v4.view.ViewPager: int getClientWidth()
android.support.v4.view.ViewPager: void setCurrentItem(int)
android.support.v4.view.ViewPager: int getCurrentItem()
android.support.v4.view.ViewPager: void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener)
android.support.v4.view.ViewPager: void setChildrenDrawingOrderEnabledCompat(boolean)
android.support.v4.view.ViewPager: int getOffscreenPageLimit()
android.support.v4.view.ViewPager: void setOffscreenPageLimit(int)
android.support.v4.view.ViewPager: void setPageMargin(int)
android.support.v4.view.ViewPager: int getPageMargin()
android.support.v4.view.ViewPager: void setPageMarginDrawable(android.graphics.drawable.Drawable)
android.support.v4.view.ViewPager: void setPageMarginDrawable(int)
android.support.v4.view.ViewPager: void setScrollingCacheEnabled(boolean)
android.support.v4.view.ViewPager$SavedState
android.support.v4.view.ViewPager$SavedState: android.os.Parcelable$Creator CREATOR
android.support.v4.widget.DrawerLayout: void setScrimColor(int)
android.support.v4.widget.DrawerLayout: void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener)
android.support.v4.widget.DrawerLayout: void setDrawerLockMode(int)
android.support.v4.widget.DrawerLayout$SavedState
android.support.v4.widget.DrawerLayout$SavedState: android.os.Parcelable$Creator CREATOR
android.support.v4.widget.SlidingPaneLayout: void setParallaxDistance(int)
android.support.v4.widget.SlidingPaneLayout: int getParallaxDistance()
android.support.v4.widget.SlidingPaneLayout: void setSliderFadeColor(int)
android.support.v4.widget.SlidingPaneLayout: int getSliderFadeColor()
android.support.v4.widget.SlidingPaneLayout: void setCoveredFadeColor(int)
android.support.v4.widget.SlidingPaneLayout: int getCoveredFadeColor()
android.support.v4.widget.SlidingPaneLayout: void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener)
android.support.v4.widget.SlidingPaneLayout: void setShadowDrawable(android.graphics.drawable.Drawable)
android.support.v4.widget.SlidingPaneLayout: void setShadowResource(int)
android.support.v4.widget.SlidingPaneLayout$SavedState
android.support.v4.widget.SlidingPaneLayout$SavedState: android.os.Parcelable$Creator CREATOR
aurelienribon.tweenengine.Timeline$Modes: aurelienribon.tweenengine.Timeline$Modes[] values()
aurelienribon.tweenengine.Timeline$Modes: aurelienribon.tweenengine.Timeline$Modes valueOf(java.lang.String)
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType[] values()
com.badlogic.gdx.Application$ApplicationType: com.badlogic.gdx.Application$ApplicationType valueOf(java.lang.String)
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType[] values()
com.badlogic.gdx.Files$FileType: com.badlogic.gdx.Files$FileType valueOf(java.lang.String)
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType[] values()
com.badlogic.gdx.Graphics$GraphicsType: com.badlogic.gdx.Graphics$GraphicsType valueOf(java.lang.String)
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation[] values()
com.badlogic.gdx.Input$Orientation: com.badlogic.gdx.Input$Orientation valueOf(java.lang.String)
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral[] values()
com.badlogic.gdx.Input$Peripheral: com.badlogic.gdx.Input$Peripheral valueOf(java.lang.String)
com.badlogic.gdx.Net$Protocol: com.badlogic.gdx.Net$Protocol[] values()
com.badlogic.gdx.Net$Protocol: com.badlogic.gdx.Net$Protocol valueOf(java.lang.String)
com.badlogic.gdx.backends.android.AndroidApplication: AndroidApplication()
com.badlogic.gdx.backends.android.AndroidGL20
com.badlogic.gdx.backends.android.AndroidGL20: void init()
com.badlogic.gdx.backends.android.AndroidGL20: void glActiveTexture(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glAttachShader(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindAttribLocation(int,int,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindBuffer(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindFramebuffer(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindRenderbuffer(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBindTexture(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendColor(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendEquation(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendEquationSeparate(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendFunc(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBlendFuncSeparate(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBufferData(int,int,java.nio.Buffer,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glBufferSubData(int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: int glCheckFramebufferStatus(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glClear(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glClearColor(float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glClearDepthf(float)
com.badlogic.gdx.backends.android.AndroidGL20: void glClearStencil(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glColorMask(boolean,boolean,boolean,boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glCompileShader(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glCompressedTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glCopyTexImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glCopyTexSubImage2D(int,int,int,int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: int glCreateProgram()
com.badlogic.gdx.backends.android.AndroidGL20: int glCreateShader(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glCullFace(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteProgram(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteShader(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDeleteTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDepthFunc(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDepthMask(boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glDepthRangef(float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glDetachShader(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDisable(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDisableVertexAttribArray(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDrawArrays(int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glDrawElements(int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glDrawElements(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glEnable(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glEnableVertexAttribArray(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glFinish()
com.badlogic.gdx.backends.android.AndroidGL20: void glFlush()
com.badlogic.gdx.backends.android.AndroidGL20: void glFramebufferRenderbuffer(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glFramebufferTexture2D(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glFrontFace(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenBuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenerateMipmap(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenFramebuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenRenderbuffers(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGenTextures(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetActiveAttrib(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetActiveUniform(int,int,java.nio.IntBuffer,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetAttachedShaders(int,int,java.nio.Buffer,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: int glGetAttribLocation(int,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetBooleanv(int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetBufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: int glGetError()
com.badlogic.gdx.backends.android.AndroidGL20: void glGetFloatv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetFramebufferAttachmentParameteriv(int,int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetIntegerv(int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetProgramiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetProgramInfoLog(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetRenderbufferParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetShaderiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetShaderInfoLog(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetShaderPrecisionFormat(int,int,java.nio.IntBuffer,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetShaderSource(int,int,java.nio.Buffer,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: java.lang.String glGetString(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetUniformfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetUniformiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: int glGetUniformLocation(int,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetVertexAttribfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetVertexAttribiv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glGetVertexAttribPointerv(int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glHint(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsBuffer(int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsEnabled(int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsFramebuffer(int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsProgram(int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsRenderbuffer(int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsShader(int)
com.badlogic.gdx.backends.android.AndroidGL20: boolean glIsTexture(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glLineWidth(float)
com.badlogic.gdx.backends.android.AndroidGL20: void glLinkProgram(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glPixelStorei(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glPolygonOffset(float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glReadPixels(int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glReleaseShaderCompiler()
com.badlogic.gdx.backends.android.AndroidGL20: void glRenderbufferStorage(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glSampleCoverage(float,boolean)
com.badlogic.gdx.backends.android.AndroidGL20: void glScissor(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glShaderBinary(int,java.nio.IntBuffer,int,java.nio.Buffer,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glShaderSource(int,java.lang.String)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilFunc(int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilFuncSeparate(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilMask(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilMaskSeparate(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilOp(int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glStencilOpSeparate(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameterf(int,int,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameterfv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameteri(int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexParameteriv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glTexSubImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1f(int,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1i(int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform1iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2f(int,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2i(int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform2iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3f(int,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3i(int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform3iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4f(int,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4fv(int,int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4i(int,int,int,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniform4iv(int,int,java.nio.IntBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix2fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix3fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUniformMatrix4fv(int,int,boolean,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glUseProgram(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glValidateProgram(int)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib1f(int,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib1fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib2f(int,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib2fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib3f(int,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib3fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib4f(int,float,float,float,float)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttrib4fv(int,java.nio.FloatBuffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)
com.badlogic.gdx.backends.android.AndroidGL20: void glVertexAttribPointer(int,int,int,boolean,int,int)
com.badlogic.gdx.backends.android.AndroidGL20: void glViewport(int,int,int,int)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$GLWrapper)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setDebugFlags(int)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: int getDebugFlags()
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setEGLContextFactory(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLContextFactory)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setEGLWindowSurfaceFactory(com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView$EGLWindowSurfaceFactory)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setEGLConfigChooser(boolean)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: void setRenderMode(int)
com.badlogic.gdx.backends.android.surfaceview.GLBaseSurfaceView: int getRenderMode()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: void setGLWrapper(com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake$GLWrapper)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: void setDebugFlags(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: int getDebugFlags()
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: void setRenderer(android.opengl.GLSurfaceView$Renderer)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: void setEGLConfigChooser(boolean)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: void setRenderMode(int)
com.badlogic.gdx.backends.android.surfaceview.GLSurfaceViewCupcake: int getRenderMode()
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType[] values()
com.badlogic.gdx.graphics.Mesh$VertexDataType: com.badlogic.gdx.graphics.Mesh$VertexDataType valueOf(java.lang.String)
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending[] values()
com.badlogic.gdx.graphics.Pixmap$Blending: com.badlogic.gdx.graphics.Pixmap$Blending valueOf(java.lang.String)
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter[] values()
com.badlogic.gdx.graphics.Pixmap$Filter: com.badlogic.gdx.graphics.Pixmap$Filter valueOf(java.lang.String)
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format[] values()
com.badlogic.gdx.graphics.Pixmap$Format: com.badlogic.gdx.graphics.Pixmap$Format valueOf(java.lang.String)
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter[] values()
com.badlogic.gdx.graphics.Texture$TextureFilter: com.badlogic.gdx.graphics.Texture$TextureFilter valueOf(java.lang.String)
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap[] values()
com.badlogic.gdx.graphics.Texture$TextureWrap: com.badlogic.gdx.graphics.Texture$TextureWrap valueOf(java.lang.String)
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType[] values()
com.badlogic.gdx.graphics.TextureData$TextureDataType: com.badlogic.gdx.graphics.TextureData$TextureDataType valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment: com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment[] values()
com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment: com.badlogic.gdx.graphics.g2d.BitmapFont$HAlignment valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer load(long[],byte[],int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.nio.ByteBuffer newPixmap(long[],int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void free(long)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void clear(long,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setPixel(long,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: int getPixel(long,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawLine(long,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawRect(long,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawCircle(long,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillRect(long,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void fillCircle(long,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void drawPixmap(long,long,int,int,int,int,int,int,int,int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setBlend(int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: void setScale(int)
com.badlogic.gdx.graphics.g2d.Gdx2DPixmap: java.lang.String getFailureReason()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide[] values()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnEllipseSide valueOf(java.lang.String)
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape[] values()
com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape: com.badlogic.gdx.graphics.g2d.ParticleEmitter$SpawnShape valueOf(java.lang.String)
com.badlogic.gdx.graphics.glutils.ETC1
com.badlogic.gdx.graphics.glutils.ETC1: int getCompressedDataSize(int,int)
com.badlogic.gdx.graphics.glutils.ETC1: void formatHeader(java.nio.ByteBuffer,int,int,int)
com.badlogic.gdx.graphics.glutils.ETC1: int getWidthPKM(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.glutils.ETC1: int getHeightPKM(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.glutils.ETC1: boolean isValidPKM(java.nio.ByteBuffer,int)
com.badlogic.gdx.graphics.glutils.ETC1: void decodeImage(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int)
com.badlogic.gdx.graphics.glutils.ETC1: java.nio.ByteBuffer encodeImage(java.nio.ByteBuffer,int,int,int,int)
com.badlogic.gdx.graphics.glutils.ETC1: java.nio.ByteBuffer encodeImagePKM(java.nio.ByteBuffer,int,int,int,int)
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType[] values()
com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType: com.badlogic.gdx.graphics.glutils.ShapeRenderer$ShapeType valueOf(java.lang.String)
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode[] values()
com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode: com.badlogic.gdx.maps.tiled.TiledMapTile$BlendMode valueOf(java.lang.String)
com.badlogic.gdx.math.Matrix4
com.badlogic.gdx.math.Matrix4: void mul(float[],float[])
com.badlogic.gdx.math.Matrix4: void mulVec(float[],float[])
com.badlogic.gdx.math.Matrix4: void mulVec(float[],float[],int,int,int)
com.badlogic.gdx.math.Matrix4: void prj(float[],float[])
com.badlogic.gdx.math.Matrix4: void prj(float[],float[],int,int,int)
com.badlogic.gdx.math.Matrix4: void rot(float[],float[])
com.badlogic.gdx.math.Matrix4: void rot(float[],float[],int,int,int)
com.badlogic.gdx.math.Matrix4: boolean inv(float[])
com.badlogic.gdx.math.Matrix4: float det(float[])
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide[] values()
com.badlogic.gdx.math.Plane$PlaneSide: com.badlogic.gdx.math.Plane$PlaneSide valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.Body
com.badlogic.gdx.physics.box2d.Body: long jniCreateFixture(long,long,float,float,float,boolean,short,short,short)
com.badlogic.gdx.physics.box2d.Body: long jniCreateFixture(long,long,float)
com.badlogic.gdx.physics.box2d.Body: void jniDestroyFixture(long,long)
com.badlogic.gdx.physics.box2d.Body: void jniSetTransform(long,float,float,float)
com.badlogic.gdx.physics.box2d.Body: void jniGetTransform(long,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetPosition(long,float[])
com.badlogic.gdx.physics.box2d.Body: float jniGetAngle(long)
com.badlogic.gdx.physics.box2d.Body: void jniGetWorldCenter(long,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetLocalCenter(long,float[])
com.badlogic.gdx.physics.box2d.Body: void jniSetLinearVelocity(long,float,float)
com.badlogic.gdx.physics.box2d.Body: void jniGetLinearVelocity(long,float[])
com.badlogic.gdx.physics.box2d.Body: void jniSetAngularVelocity(long,float)
com.badlogic.gdx.physics.box2d.Body: float jniGetAngularVelocity(long)
com.badlogic.gdx.physics.box2d.Body: void jniApplyForce(long,float,float,float,float,boolean)
com.badlogic.gdx.physics.box2d.Body: void jniApplyForceToCenter(long,float,float,boolean)
com.badlogic.gdx.physics.box2d.Body: void jniApplyTorque(long,float,boolean)
com.badlogic.gdx.physics.box2d.Body: void jniApplyLinearImpulse(long,float,float,float,float,boolean)
com.badlogic.gdx.physics.box2d.Body: void jniApplyAngularImpulse(long,float,boolean)
com.badlogic.gdx.physics.box2d.Body: float jniGetMass(long)
com.badlogic.gdx.physics.box2d.Body: float jniGetInertia(long)
com.badlogic.gdx.physics.box2d.Body: void jniGetMassData(long,float[])
com.badlogic.gdx.physics.box2d.Body: void jniSetMassData(long,float,float,float,float)
com.badlogic.gdx.physics.box2d.Body: void jniResetMassData(long)
com.badlogic.gdx.physics.box2d.Body: void jniGetWorldPoint(long,float,float,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetWorldVector(long,float,float,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetLocalPoint(long,float,float,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetLocalVector(long,float,float,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetLinearVelocityFromWorldPoint(long,float,float,float[])
com.badlogic.gdx.physics.box2d.Body: void jniGetLinearVelocityFromLocalPoint(long,float,float,float[])
com.badlogic.gdx.physics.box2d.Body: float jniGetLinearDamping(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetLinearDamping(long,float)
com.badlogic.gdx.physics.box2d.Body: float jniGetAngularDamping(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetAngularDamping(long,float)
com.badlogic.gdx.physics.box2d.Body: void jniSetType(long,int)
com.badlogic.gdx.physics.box2d.Body: int jniGetType(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetBullet(long,boolean)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsBullet(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetSleepingAllowed(long,boolean)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsSleepingAllowed(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetAwake(long,boolean)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsAwake(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetActive(long,boolean)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsActive(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetFixedRotation(long,boolean)
com.badlogic.gdx.physics.box2d.Body: boolean jniIsFixedRotation(long)
com.badlogic.gdx.physics.box2d.Body: float jniGetGravityScale(long)
com.badlogic.gdx.physics.box2d.Body: void jniSetGravityScale(long,float)
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] values()
com.badlogic.gdx.physics.box2d.BodyDef$BodyType: com.badlogic.gdx.physics.box2d.BodyDef$BodyType valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.ChainShape
com.badlogic.gdx.physics.box2d.ChainShape: long newChainShape()
com.badlogic.gdx.physics.box2d.ChainShape: void jniCreateLoop(long,float[],int)
com.badlogic.gdx.physics.box2d.ChainShape: void jniCreateChain(long,float[],int)
com.badlogic.gdx.physics.box2d.ChainShape: void jniSetPrevVertex(long,float,float)
com.badlogic.gdx.physics.box2d.ChainShape: void jniSetNextVertex(long,float,float)
com.badlogic.gdx.physics.box2d.ChainShape: int jniGetVertexCount(long)
com.badlogic.gdx.physics.box2d.ChainShape: void jniGetVertex(long,int,float[])
com.badlogic.gdx.physics.box2d.CircleShape
com.badlogic.gdx.physics.box2d.CircleShape: long newCircleShape()
com.badlogic.gdx.physics.box2d.CircleShape: void jniGetPosition(long,float[])
com.badlogic.gdx.physics.box2d.CircleShape: void jniSetPosition(long,float,float)
com.badlogic.gdx.physics.box2d.Contact
com.badlogic.gdx.physics.box2d.Contact: int jniGetWorldManifold(long,float[])
com.badlogic.gdx.physics.box2d.Contact: boolean jniIsTouching(long)
com.badlogic.gdx.physics.box2d.Contact: void jniSetEnabled(long,boolean)
com.badlogic.gdx.physics.box2d.Contact: boolean jniIsEnabled(long)
com.badlogic.gdx.physics.box2d.Contact: long jniGetFixtureA(long)
com.badlogic.gdx.physics.box2d.Contact: long jniGetFixtureB(long)
com.badlogic.gdx.physics.box2d.Contact: int jniGetChildIndexA(long)
com.badlogic.gdx.physics.box2d.Contact: int jniGetChildIndexB(long)
com.badlogic.gdx.physics.box2d.Contact: void jniSetFriction(long,float)
com.badlogic.gdx.physics.box2d.Contact: float jniGetFriction(long)
com.badlogic.gdx.physics.box2d.Contact: void jniResetFriction(long)
com.badlogic.gdx.physics.box2d.Contact: void jniSetRestitution(long,float)
com.badlogic.gdx.physics.box2d.Contact: float jniGetRestitution(long)
com.badlogic.gdx.physics.box2d.Contact: void jniResetRestitution(long)
com.badlogic.gdx.physics.box2d.ContactImpulse
com.badlogic.gdx.physics.box2d.ContactImpulse: void jniGetNormalImpulses(long,float[])
com.badlogic.gdx.physics.box2d.ContactImpulse: void jniGetTangentImpulses(long,float[])
com.badlogic.gdx.physics.box2d.ContactImpulse: int jniGetCount(long)
com.badlogic.gdx.physics.box2d.EdgeShape
com.badlogic.gdx.physics.box2d.EdgeShape: long newEdgeShape()
com.badlogic.gdx.physics.box2d.EdgeShape: void jniSet(long,float,float,float,float)
com.badlogic.gdx.physics.box2d.EdgeShape: void jniGetVertex1(long,float[])
com.badlogic.gdx.physics.box2d.EdgeShape: void jniGetVertex2(long,float[])
com.badlogic.gdx.physics.box2d.Fixture
com.badlogic.gdx.physics.box2d.Fixture: int jniGetType(long)
com.badlogic.gdx.physics.box2d.Fixture: long jniGetShape(long)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetSensor(long,boolean)
com.badlogic.gdx.physics.box2d.Fixture: boolean jniIsSensor(long)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetFilterData(long,short,short,short)
com.badlogic.gdx.physics.box2d.Fixture: void jniGetFilterData(long,short[])
com.badlogic.gdx.physics.box2d.Fixture: void jniRefilter(long)
com.badlogic.gdx.physics.box2d.Fixture: boolean jniTestPoint(long,float,float)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetDensity(long,float)
com.badlogic.gdx.physics.box2d.Fixture: float jniGetDensity(long)
com.badlogic.gdx.physics.box2d.Fixture: float jniGetFriction(long)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetFriction(long,float)
com.badlogic.gdx.physics.box2d.Fixture: float jniGetRestitution(long)
com.badlogic.gdx.physics.box2d.Fixture: void jniSetRestitution(long,float)
com.badlogic.gdx.physics.box2d.Joint
com.badlogic.gdx.physics.box2d.Joint: int jniGetType(long)
com.badlogic.gdx.physics.box2d.Joint: long jniGetBodyA(long)
com.badlogic.gdx.physics.box2d.Joint: long jniGetBodyB(long)
com.badlogic.gdx.physics.box2d.Joint: void jniGetAnchorA(long,float[])
com.badlogic.gdx.physics.box2d.Joint: void jniGetAnchorB(long,float[])
com.badlogic.gdx.physics.box2d.Joint: void jniGetReactionForce(long,float,float[])
com.badlogic.gdx.physics.box2d.Joint: float jniGetReactionTorque(long,float)
com.badlogic.gdx.physics.box2d.Joint: boolean jniIsActive(long)
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType[] values()
com.badlogic.gdx.physics.box2d.JointDef$JointType: com.badlogic.gdx.physics.box2d.JointDef$JointType valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.Manifold
com.badlogic.gdx.physics.box2d.Manifold: int jniGetType(long)
com.badlogic.gdx.physics.box2d.Manifold: int jniGetPointCount(long)
com.badlogic.gdx.physics.box2d.Manifold: void jniGetLocalNormal(long,float[])
com.badlogic.gdx.physics.box2d.Manifold: void jniGetLocalPoint(long,float[])
com.badlogic.gdx.physics.box2d.Manifold: int jniGetPoint(long,float[],int)
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType[] values()
com.badlogic.gdx.physics.box2d.Manifold$ManifoldType: com.badlogic.gdx.physics.box2d.Manifold$ManifoldType valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.PolygonShape
com.badlogic.gdx.physics.box2d.PolygonShape: long newPolygonShape()
com.badlogic.gdx.physics.box2d.PolygonShape: void jniSet(long,float[],int,int)
com.badlogic.gdx.physics.box2d.PolygonShape: void jniSetAsBox(long,float,float)
com.badlogic.gdx.physics.box2d.PolygonShape: void jniSetAsBox(long,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.PolygonShape: int jniGetVertexCount(long)
com.badlogic.gdx.physics.box2d.PolygonShape: void jniGetVertex(long,int,float[])
com.badlogic.gdx.physics.box2d.Shape
com.badlogic.gdx.physics.box2d.Shape: float jniGetRadius(long)
com.badlogic.gdx.physics.box2d.Shape: void jniSetRadius(long,float)
com.badlogic.gdx.physics.box2d.Shape: void jniDispose(long)
com.badlogic.gdx.physics.box2d.Shape: int jniGetType(long)
com.badlogic.gdx.physics.box2d.Shape: int jniGetChildCount(long)
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type[] values()
com.badlogic.gdx.physics.box2d.Shape$Type: com.badlogic.gdx.physics.box2d.Shape$Type valueOf(java.lang.String)
com.badlogic.gdx.physics.box2d.World
com.badlogic.gdx.physics.box2d.World: long newWorld(float,float,boolean)
com.badlogic.gdx.physics.box2d.World: void setUseDefaultContactFilter(boolean)
com.badlogic.gdx.physics.box2d.World: long jniCreateBody(long,int,float,float,float,float,float,float,float,float,boolean,boolean,boolean,boolean,boolean,float)
com.badlogic.gdx.physics.box2d.World: void jniDestroyBody(long,long)
com.badlogic.gdx.physics.box2d.World: long jniCreateWheelJoint(long,long,long,boolean,float,float,float,float,float,float,boolean,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateRopeJoint(long,long,long,boolean,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateDistanceJoint(long,long,long,boolean,float,float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateFrictionJoint(long,long,long,boolean,float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateGearJoint(long,long,long,boolean,long,long,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateMouseJoint(long,long,long,boolean,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreatePrismaticJoint(long,long,long,boolean,float,float,float,float,float,float,float,boolean,float,float,boolean,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreatePulleyJoint(long,long,long,boolean,float,float,float,float,float,float,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateRevoluteJoint(long,long,long,boolean,float,float,float,float,float,boolean,float,float,boolean,float,float)
com.badlogic.gdx.physics.box2d.World: long jniCreateWeldJoint(long,long,long,boolean,float,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: void jniDestroyJoint(long,long)
com.badlogic.gdx.physics.box2d.World: void jniStep(long,float,int,int)
com.badlogic.gdx.physics.box2d.World: void jniClearForces(long)
com.badlogic.gdx.physics.box2d.World: void jniSetWarmStarting(long,boolean)
com.badlogic.gdx.physics.box2d.World: void jniSetContiousPhysics(long,boolean)
com.badlogic.gdx.physics.box2d.World: int jniGetProxyCount(long)
com.badlogic.gdx.physics.box2d.World: int jniGetBodyCount(long)
com.badlogic.gdx.physics.box2d.World: int jniGetJointcount(long)
com.badlogic.gdx.physics.box2d.World: int jniGetContactCount(long)
com.badlogic.gdx.physics.box2d.World: void jniSetGravity(long,float,float)
com.badlogic.gdx.physics.box2d.World: void jniGetGravity(long,float[])
com.badlogic.gdx.physics.box2d.World: boolean jniIsLocked(long)
com.badlogic.gdx.physics.box2d.World: void jniSetAutoClearForces(long,boolean)
com.badlogic.gdx.physics.box2d.World: boolean jniGetAutoClearForces(long)
com.badlogic.gdx.physics.box2d.World: void jniQueryAABB(long,float,float,float,float)
com.badlogic.gdx.physics.box2d.World: void jniGetContactList(long,long[])
com.badlogic.gdx.physics.box2d.World: void jniDispose(long)
com.badlogic.gdx.physics.box2d.World: void setVelocityThreshold(float)
com.badlogic.gdx.physics.box2d.World: float getVelocityThreshold()
com.badlogic.gdx.physics.box2d.World: void jniRayCast(long,float,float,float,float)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniSetLength(long,float)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float jniGetLength(long)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniSetFrequency(long,float)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float jniGetFrequency(long)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: void jniSetDampingRatio(long,float)
com.badlogic.gdx.physics.box2d.joints.DistanceJoint: float jniGetDampingRatio(long)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void jniSetMaxForce(long,float)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float jniGetMaxForce(long)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: void jniSetMaxTorque(long,float)
com.badlogic.gdx.physics.box2d.joints.FrictionJoint: float jniGetMaxTorque(long)
com.badlogic.gdx.physics.box2d.joints.GearJoint
com.badlogic.gdx.physics.box2d.joints.GearJoint: void jniSetRatio(long,float)
com.badlogic.gdx.physics.box2d.joints.GearJoint: float jniGetRatio(long)
com.badlogic.gdx.physics.box2d.joints.MouseJoint
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetTarget(long,float,float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniGetTarget(long,float[])
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetMaxForce(long,float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float jniGetMaxForce(long)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetFrequency(long,float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float jniGetFrequency(long)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: void jniSetDampingRatio(long,float)
com.badlogic.gdx.physics.box2d.joints.MouseJoint: float jniGetDampingRatio(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetJointTranslation(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetJointSpeed(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: boolean jniIsLimitEnabled(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniEnableLimit(long,boolean)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetLowerLimit(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetUpperLimit(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniSetLimits(long,float,float)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: boolean jniIsMotorEnabled(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniEnableMotor(long,boolean)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniSetMotorSpeed(long,float)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetMotorSpeed(long)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: void jniSetMaxMotorForce(long,float)
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint: float jniGetMotorForce(long,float)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: void jniGetGroundAnchorA(long,float[])
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: void jniGetGroundAnchorB(long,float[])
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float jniGetLength1(long)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float jniGetLength2(long)
com.badlogic.gdx.physics.box2d.joints.PulleyJoint: float jniGetRatio(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetJointAngle(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetJointSpeed(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: boolean jniIsLimitEnabled(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniEnableLimit(long,boolean)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetLowerLimit(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetUpperLimit(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniSetLimits(long,float,float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: boolean jniIsMotorEnabled(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniEnableMotor(long,boolean)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniSetMotorSpeed(long,float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetMotorSpeed(long)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: void jniSetMaxMotorTorque(long,float)
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint: float jniGetMotorTorque(long,float)
com.badlogic.gdx.physics.box2d.joints.RopeJoint
com.badlogic.gdx.physics.box2d.joints.RopeJoint: float jniGetMaxLength(long)
com.badlogic.gdx.physics.box2d.joints.RopeJoint: float jniSetMaxLength(long,float)
com.badlogic.gdx.physics.box2d.joints.WeldJoint
com.badlogic.gdx.physics.box2d.joints.WeldJoint: float jniGetReferenceAngle(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetJointTranslation(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetJointSpeed(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: boolean jniIsMotorEnabled(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniEnableMotor(long,boolean)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetMotorSpeed(long,float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetMotorSpeed(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetMaxMotorTorque(long,float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetMaxMotorTorque(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetMotorTorque(long,float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetSpringFrequencyHz(long,float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetSpringFrequencyHz(long)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: void jniSetSpringDampingRatio(long,float)
com.badlogic.gdx.physics.box2d.joints.WheelJoint: float jniGetSpringDampingRatio(long)
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type[] values()
com.badlogic.gdx.scenes.scene2d.InputEvent$Type: com.badlogic.gdx.scenes.scene2d.InputEvent$Type valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable[] values()
com.badlogic.gdx.scenes.scene2d.Touchable: com.badlogic.gdx.scenes.scene2d.Touchable valueOf(java.lang.String)
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type[] values()
com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type: com.badlogic.gdx.scenes.scene2d.utils.FocusListener$FocusEvent$Type valueOf(java.lang.String)
com.badlogic.gdx.utils.BufferUtils
com.badlogic.gdx.utils.BufferUtils: void freeMemory(java.nio.ByteBuffer)
com.badlogic.gdx.utils.BufferUtils: java.nio.ByteBuffer newDisposableByteBuffer(int)
com.badlogic.gdx.utils.BufferUtils: long getBufferAddress(java.nio.Buffer)
com.badlogic.gdx.utils.BufferUtils: void clear(java.nio.ByteBuffer,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(float[],java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(byte[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(char[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(short[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(int[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(long[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(float[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(double[],int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.BufferUtils: void copyJni(java.nio.Buffer,int,java.nio.Buffer,int,int)
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType[] values()
com.badlogic.gdx.utils.JsonValue$ValueType: com.badlogic.gdx.utils.JsonValue$ValueType valueOf(java.lang.String)
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType[] values()
com.badlogic.gdx.utils.JsonWriter$OutputType: com.badlogic.gdx.utils.JsonWriter$OutputType valueOf(java.lang.String)
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling[] values()
com.badlogic.gdx.utils.Scaling: com.badlogic.gdx.utils.Scaling valueOf(java.lang.String)
com.esotericsoftware.tablelayout.BaseTableLayout$Debug: com.esotericsoftware.tablelayout.BaseTableLayout$Debug[] values()
com.esotericsoftware.tablelayout.BaseTableLayout$Debug: com.esotericsoftware.tablelayout.BaseTableLayout$Debug valueOf(java.lang.String)
hevs.androiddemoselector.AboutDialog
hevs.androiddemoselector.AboutDialog: AboutDialog()
hevs.androiddemoselector.DemoSelectorActivity
hevs.androiddemoselector.DemoSelectorActivity: DemoSelectorActivity()
hevs.androiddemoselector.DemoSelectorActivity: void onClick(android.view.View)
hevs.androiddemoselector.GameActivity
hevs.androiddemoselector.GameActivity: GameActivity()
hevs.androiddemoselector.R$drawable: int ic_launcher
hevs.androiddemoselector.R$drawable: int icone_android
hevs.androiddemoselector.R$id: int btQuit
hevs.androiddemoselector.R$id: int info_text
hevs.androiddemoselector.R$id: int legal_text
hevs.androiddemoselector.R$id: int progressBar1
hevs.androiddemoselector.R$layout: int about
hevs.androiddemoselector.R$layout: int list_activity
hevs.androiddemoselector.R$layout: int mylayout
hevs.androiddemoselector.R$raw: int info
hevs.androiddemoselector.R$raw: int legal
hevs.androiddemoselector.R$string: int app_name
hevs.androiddemoselector.R$string: int btn_quit_title
hevs.androiddemoselector.R$string: int selector_header_title
hevs.androiddemoselector.R$style: int AppBaseTheme
hevs.androiddemoselector.R$style: int AppTheme
hevs.gdx2d.components.audio.MusicPlayer
hevs.gdx2d.components.audio.SoundPlayer
hevs.gdx2d.components.bitmaps.BitmapImage
hevs.gdx2d.components.colors.ColorUtils
hevs.gdx2d.components.colors.PaletteGenerator
hevs.gdx2d.components.geometry.Point
hevs.gdx2d.components.geometry.Vector2D
hevs.gdx2d.components.graphics.Polygon
hevs.gdx2d.components.physics.AbstractPhysicsObject
hevs.gdx2d.components.physics.PhysicsBox
hevs.gdx2d.components.physics.PhysicsCircle
hevs.gdx2d.components.physics.PhysicsStaticBox
hevs.gdx2d.components.physics.utils.PhysicsConstants
hevs.gdx2d.components.physics.utils.PhysicsScreenBoundaries
hevs.gdx2d.components.physics.utils.PhysicsWorld
hevs.gdx2d.demos.accelerometer.DemoAccelerometer
hevs.gdx2d.demos.complex_shapes.DemoComplexShapes
hevs.gdx2d.demos.complex_shapes.DemoComplexShapes$type_shape
hevs.gdx2d.demos.complex_shapes.DemoComplexShapes$type_shape: hevs.gdx2d.demos.complex_shapes.DemoComplexShapes$type_shape[] values()
hevs.gdx2d.demos.complex_shapes.DemoComplexShapes$type_shape: hevs.gdx2d.demos.complex_shapes.DemoComplexShapes$type_shape valueOf(java.lang.String)
hevs.gdx2d.demos.complex_shapes.DrawableShape
hevs.gdx2d.demos.gestures.DemoGesture
hevs.gdx2d.demos.image_drawing.DemoMirrorImage
hevs.gdx2d.demos.image_drawing.DemoRotatingImage
hevs.gdx2d.demos.image_drawing.DemoSimpleImage
hevs.gdx2d.demos.music.DemoMusicPlay
hevs.gdx2d.demos.physics.DemoPhysicsBalls
hevs.gdx2d.demos.physics.DemoPhysicsMouse
hevs.gdx2d.demos.physics.DemoPhysicsMouse$1
hevs.gdx2d.demos.physics.DemoSimplePhysics
hevs.gdx2d.demos.physics.collisions.BumpyBall
hevs.gdx2d.demos.physics.collisions.DemoCollisionListener
hevs.gdx2d.demos.physics.particle.DemoParticlePhysics
hevs.gdx2d.demos.physics.particle.Particle
hevs.gdx2d.demos.physics.rocket.DemoPhysicsRocket
hevs.gdx2d.demos.physics.rocket.Sky
hevs.gdx2d.demos.physics.rocket.Spaceship
hevs.gdx2d.demos.scrolling.DemoScrolling
hevs.gdx2d.demos.scrolling.objects.Brick
hevs.gdx2d.demos.scrolling.objects.Cloud
hevs.gdx2d.demos.scrolling.objects.Coin
hevs.gdx2d.demos.scrolling.objects.Pipe
hevs.gdx2d.demos.scrolling.objects.Sky
hevs.gdx2d.demos.simple.DemoSimpleAnimation
hevs.gdx2d.demos.simple.DemoSimpleShapes
hevs.gdx2d.demos.tween.Ball
hevs.gdx2d.demos.tween.BallAccessor
hevs.gdx2d.demos.tween.DemoTween
hevs.gdx2d.lib.Game2D
hevs.gdx2d.lib.Game2D$1
hevs.gdx2d.lib.Game2D$2
hevs.gdx2d.lib.Game2D$3
hevs.gdx2d.lib.Game2D$4
hevs.gdx2d.lib.GdxGraphics
hevs.gdx2d.lib.PortableApplication
hevs.gdx2d.lib.Version
hevs.gdx2d.lib.interfaces.AndroidResolver
hevs.gdx2d.lib.interfaces.DrawableObject
hevs.gdx2d.lib.interfaces.GameInterface
hevs.gdx2d.lib.interfaces.KeyboardInterface
hevs.gdx2d.lib.interfaces.TouchInterface
hevs.gdx2d.lib.perf_tests.Benchmarker
hevs.gdx2d.lib.utils.GraphicTimer
hevs.gdx2d.lib.utils.Logger
hevs.gdx2d.lib.utils.Utils
